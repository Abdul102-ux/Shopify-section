{% comment %}
  Before/After Slider Section - Premium
  Features: Interactive image comparison, smooth transitions, animations
{% endcomment %}

<style>
.before-after-{{ section.id }} {
  width: 100%;
  padding: 3rem 1.6rem;
  background: {{ section.settings.bg_color }};
}

@media screen and (min-width: 750px) {
  .before-after-{{ section.id }} {
    padding: 4rem 2rem;
  }
}

.before-after-{{ section.id }} .section-header {
  text-align: center;
  margin-bottom: 3rem;
}

@media screen and (min-width: 750px) {
  .before-after-{{ section.id }} .section-header {
    margin-bottom: 4rem;
  }
}

.before-after-{{ section.id }} .section-heading {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: {{ section.settings.heading_color }};
}

@media screen and (min-width: 750px) {
  .before-after-{{ section.id }} .section-heading {
    font-size: 2.8rem;
  }
}

.before-after-{{ section.id }} .section-description {
  font-size: 1rem;
  color: {{ section.settings.description_color }};
  max-width: 600px;
  margin: 0 auto;
}

/* Slider Container */
.before-after-{{ section.id }} .slider-wrapper {
  max-width: 900px;
  margin: 2rem auto 0;
  opacity: 0;
  animation: fadeIn-{{ section.id }} 0.8s ease forwards;
}

@keyframes fadeIn-{{ section.id }} {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.before-after-{{ section.id }} .slider-container {
  position: relative;
  overflow: hidden;
  border-radius: 8px;
  background: #f0f0f0;
}

.before-after-{{ section.id }} .img-wrapper {
  position: relative;
  width: 100%;
  padding-bottom: 66.67%;
}

.before-after-{{ section.id }} .img-before,
.before-after-{{ section.id }} .img-after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.before-after-{{ section.id }} .img-before img,
.before-after-{{ section.id }} .img-after img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center center;
  display: block;
  position: absolute;
  top: 0;
  left: 0;
}

.before-after-{{ section.id }} .img-before {
  z-index: 1;
  clip-path: inset(0 0 0 0);
}

.before-after-{{ section.id }} .img-after {
  z-index: 0;
}

/* Handle */
.before-after-{{ section.id }} .slider-handle {
  position: absolute;
  top: 0;
  left: 50%;
  width: 4px;
  height: 100%;
  background: {{ section.settings.handle_color }};
  cursor: ew-resize;
  z-index: 10;
  transform: translateX(-50%);
}

.before-after-{{ section.id }} .slider-button {
  position: absolute;
  top: 50%;
  left: -24px;
  width: 48px;
  height: 48px;
  background: {{ section.settings.button_bg }};
  border: 2px solid {{ section.settings.handle_color }};
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transform: translate(0, -50%);
  transition: all 0.3s ease;
  z-index: 11;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.before-after-{{ section.id }} .slider-handle:hover .slider-button {
  background: {{ section.settings.button_bg | color_lighten: 5 }};
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.before-after-{{ section.id }} .slider-button svg {
  width: 24px;
  height: 24px;
  color: {{ section.settings.handle_color }};
}

/* Labels */
.before-after-{{ section.id }} .label {
  position: absolute;
  top: 1rem;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  padding: 0.4rem 0.8rem;
  border-radius: 4px;
  z-index: 5;
  background: rgba(0, 0, 0, 0.5);
  color: white;
  pointer-events: none;
}

.before-after-{{ section.id }} .label-before {
  left: 1rem;
}

.before-after-{{ section.id }} .label-after {
  right: 1rem;
  text-align: right;
}

/* Description */
.before-after-{{ section.id }} .slider-description {
  margin-top: 2rem;
  text-align: center;
  font-size: 1rem;
  color: {{ section.settings.text_color }};
  line-height: 1.6;
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .before-after-{{ section.id }} .slider-wrapper {
    animation: none;
    opacity: 1;
  }
  
  .before-after-{{ section.id }} .slider-button {
    transition: none;
  }
}

@media screen and (max-width: 749px) {
  .before-after-{{ section.id }} .label {
    font-size: 0.75rem;
    padding: 0.3rem 0.6rem;
    top: 0.5rem;
  }
  
  .before-after-{{ section.id }} .label-before {
    left: 0.5rem;
  }
  
  .before-after-{{ section.id }} .label-after {
    right: 0.5rem;
  }
}
</style>

<section class="before-after-{{ section.id }}" data-section-id="{{ section.id }}">
  
  <div class="section-header">
    {% if section.settings.heading != blank %}
      <h2 class="section-heading">{{ section.settings.heading }}</h2>
    {% endif %}
    
    {% if section.settings.description != blank %}
      <p class="section-description">{{ section.settings.description }}</p>
    {% endif %}
  </div>

  {% if section.settings.image_before != blank and section.settings.image_after != blank %}
    <div class="slider-wrapper">
      <div class="slider-container" data-slider>
        <div class="img-wrapper">
          <!-- Before Image -->
          <div class="img-before" data-img-before>
            {{ section.settings.image_before | image_url: width: 900 | image_tag:
              alt: section.settings.label_before,
              loading: 'eager',
              sizes: '(min-width: 750px) 900px, 100vw'
            }}
            <span class="label label-before">{{ section.settings.label_before }}</span>
          </div>

          <!-- After Image -->
          <div class="img-after">
            {{ section.settings.image_after | image_url: width: 900 | image_tag:
              alt: section.settings.label_after,
              loading: 'lazy',
              sizes: '(min-width: 750px) 900px, 100vw'
            }}
            <span class="label label-after">{{ section.settings.label_after }}</span>
          </div>

          <!-- Slider Handle -->
          <div class="slider-handle" data-handle>
            <button class="slider-button" aria-label="Drag to compare images">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 18 9 12 15 6"></polyline>
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    {% if section.settings.description_text != blank %}
      <div class="slider-description">
        {{ section.settings.description_text }}
      </div>
    {% endif %}
  {% else %}
    <div style="text-align: center; padding: 3rem 1rem; color: {{ section.settings.text_color }}; opacity: 0.7;">
      <p>Please upload both before and after images to display the comparison.</p>
    </div>
  {% endif %}
</section>

<script>
  (function() {
    const section = document.querySelector('[data-section-id="{{ section.id }}"]');
    if (!section) return;

    const slider = section.querySelector('[data-slider]');
    const handle = section.querySelector('[data-handle]');
    const imgBefore = section.querySelector('[data-img-before]');
    
    if (!slider || !handle || !imgBefore) return;

    let isActive = false;

    function updateSlider(e) {
      if (!isActive && e.type !== 'click') return;

      const rect = slider.getBoundingClientRect();
      let x = e.clientX - rect.left;

      // Touch support
      if (e.touches) {
        x = e.touches[0].clientX - rect.left;
      }

      x = Math.max(0, Math.min(x, rect.width));
      const percent = (x / rect.width) * 100;

      handle.style.left = percent + '%';
      imgBefore.style.clipPath = `inset(0 ${100 - percent}% 0 0)`;
    }

    // Mouse events
    handle.addEventListener('mousedown', () => {
      isActive = true;
    });

    document.addEventListener('mouseup', () => {
      isActive = false;
    });

    document.addEventListener('mousemove', updateSlider);

    // Touch events
    handle.addEventListener('touchstart', () => {
      isActive = true;
    });

    document.addEventListener('touchend', () => {
      isActive = false;
    });

    document.addEventListener('touchmove', updateSlider);

    // Click anywhere on slider
    slider.addEventListener('click', updateSlider);

    // Initialize at 50%
    setTimeout(() => {
      const event = new MouseEvent('click', {
        clientX: slider.getBoundingClientRect().left + slider.getBoundingClientRect().width / 2
      });
      slider.dispatchEvent(event);
    }, 100);
  })();
</script>

{% schema %}
{
  "name": "Before/After Slider",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Header"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "See the Transformation"
    },
    {
      "type": "text",
      "id": "description",
      "label": "Description",
      "default": "Drag the slider to see the before and after comparison"
    },
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "image_before",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "image_after",
      "label": "After image"
    },
    {
      "type": "text",
      "id": "label_before",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "label_after",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "textarea",
      "id": "description_text",
      "label": "Additional description",
      "placeholder": "Optional text below the slider"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Description color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Slider handle color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_bg",
      "label": "Button background",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Before/After Slider"
    }
  ]
}
{% endschema %}